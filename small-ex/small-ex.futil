// small example, mainly to check that scripts are behaving correctly 

import "primitives/core.futil";
import "primitives/unsynthesizable.futil";
import "primitives/binary_operators.futil";

//// ANCHOR: component
component times_10_and_add_1(
  reg_done: 1,
  reg_out: 32
) -> (reg_in: 32, reg_write_en: 1) {
  cells {
    add = std_add(32);
    mult = std_unsyn_mult(32);
  }
  wires {
    group do_add_and_mul {
      mult.right = reg_out;
      mult.left = 32'd10;

      add.left = 32'd1;
      add.right = mult.out;

      reg_in = add.out;
      reg_write_en = 1'd1;
      do_add_and_mul[done] = reg_done;
    }
  }
  control {
    seq { do_add_and_mul; }
  }
}
//// ANCHOR_END: component

//// ANCHOR: main
component main() -> () {
  cells {
    op = times_10_and_add_1();
    op2 = times_10_and_add_1();
    r = std_reg(32);
    mult0 = std_mult_pipe(32);
    mult1 = std_mult_pipe(32);
    mult2 = std_mult_pipe(32);
    mult3 = std_mult_pipe(32);
    mult4 = std_mult_pipe(32);
    mult5 = std_mult_pipe(32);
  }
  wires {
    // Initialize value in r
    group init_r {
      r.in = 32'd15;
      r.write_en = 1'd1;
      init_r[done] = r.done;
    }
    group apply_op {
      op.reg_done = r.done;
      op.reg_out = r.out;
      r.in = op.reg_in;
      r.write_en = op.reg_write_en;
      op.go = 1'd1;
      apply_op[done] = op.done;
    }
    group write_op2{
      op2.reg_done = 1'd1;
      op2.reg_out = 32'd2;
      op2.go = 1'd1;
      write_op2[done] = op2.done; 
    }
    group m0{
      mult0.go = 1'd1; 
      mult0.left = 32'd1; 
      mult0.right = 32'd2; 
      m0[done] = mult0.done; 
    }
    group m1{
      mult1.go = 1'd1; 
      mult1.left = 32'd1; 
      mult1.right = 32'd2; 
      m1[done] = mult1.done; 
    }
    group m2{
      mult2.go = 1'd1; 
      mult2.left = 32'd1; 
      mult2.right = 32'd2; 
      m2[done] = mult2.done; 
    }
    group m3{
      mult3.go = 1'd1; 
      mult3.left = 32'd1; 
      mult3.right = 32'd2; 
      m3[done] = mult3.done; 
    }
    group m4{
      mult4.go = 1'd1; 
      mult4.left = 32'd1; 
      mult4.right = 32'd2; 
      m4[done] = mult4.done; 
    }
    group m5{
      mult5.go = 1'd1; 
      mult5.left = 32'd1; 
      mult5.right = 32'd2; 
      m5[done] = mult5.done; 
    }
  }
  control {
    seq { init_r; apply_op; write_op2; m0; m1; m2; m3; m4; m5; }
  }
}
//// ANCHOR_END: main
